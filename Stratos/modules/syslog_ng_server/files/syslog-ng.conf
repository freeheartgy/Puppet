### THIS IS MANAGED BY PUPPET ###

@version: 3.1
#
# Syslog-ng configuration file, compatible with default Debian syslogd
# installation. Originally written by anonymous (I can't find his name)
# Revised, and rewrited by me (SZALAY Attila <sasa@debian.org>)

# First, set some global options.
options { long_hostnames(off); flush_lines(0); use_dns(no); use_fqdn(no);
	  owner("root"); group("adm"); perm(0640); stats_freq(0);
	  bad_hostname("^gconfd$");
};

########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src { unix-dgram("/dev/log"); internal();
       	     file("/proc/kmsg" program_override("kernel"));
};

# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.
#
#source s_net { tcp(ip(127.0.0.1) port(1000) authentication(required) encrypt(allow)); };

########################
# Destinations
########################
# First some standard logfile
#
destination d_auth { file("/var/log/auth.log"); };
destination d_cron { file("/var/log/cron.log"); };
destination d_daemon { file("/var/log/daemon.log"); };
destination d_kern { file("/var/log/kern.log"); };
destination d_lpr { file("/var/log/lpr.log"); };
destination d_mail { file("/var/log/mail.log"); };
destination d_syslog { file("/var/log/syslog"); };
destination d_user { file("/var/log/user.log"); };
destination d_uucp { file("/var/log/uucp.log"); };

# This files are the log come from the mail subsystem.
#
destination d_mailinfo { file("/var/log/mail/mail.info"); };
destination d_mailwarn { file("/var/log/mail/mail.warn"); };
destination d_mailerr { file("/var/log/mail/mail.err"); };

# Logging for INN news system
#
destination d_newscrit { file("/var/log/news/news.crit"); };
destination d_newserr { file("/var/log/news/news.err"); };
destination d_newsnotice { file("/var/log/news/news.notice"); };

# Some `catch-all' logfiles.
#
destination d_debug { file("/var/log/debug"); };
destination d_error { file("/var/log/error"); };
destination d_messages { file("/var/log/messages"); };

# The root's console.
#
destination d_console { usertty("root"); };

# Virtual console.
#
destination d_console_all { file("/dev/tty10"); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
destination d_xconsole { pipe("/dev/xconsole"); };

# Send the messages to an other host
#
#destination d_net { tcp("127.0.0.1" port(1000) authentication(on) encrypt(on) log_fifo_size(1000)); };

# Debian only
destination d_ppp { file("/var/log/ppp.log"); };

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which 
# message go where.

filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

filter f_debug { level(debug) and not facility(auth, authpriv, news, mail); };
filter f_error { level(err .. emerg) ; };
filter f_messages { level(info,notice,warn) and 
                    not facility(auth,authpriv,cron,daemon,mail,news); };

filter f_auth { facility(auth, authpriv) and not filter(f_debug); };
filter f_cron { facility(cron) and not filter(f_debug); };
filter f_daemon { facility(daemon) and not filter(f_debug); };
filter f_kern { facility(kern) and not filter(f_debug); };
filter f_lpr { facility(lpr) and not filter(f_debug); };
filter f_local { facility(local0, local1, local3, local4, local5,
                        local6, local7) and not filter(f_debug); };
filter f_mail { facility(mail) and not filter(f_debug); };
filter f_news { facility(news) and not filter(f_debug); };
filter f_syslog3 { not facility(auth, authpriv, mail) and not filter(f_debug); };
filter f_user { facility(user) and not filter(f_debug); };
filter f_uucp { facility(uucp) and not filter(f_debug); };

filter f_cnews { level(notice, err, crit) and facility(news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };

filter f_ppp { facility(local2) and not filter(f_debug); };
filter f_console { level(warn .. emerg); };

########################
# Log paths
########################
log { source(s_src); filter(f_auth); destination(d_auth); };
log { source(s_src); filter(f_cron); destination(d_cron); };
log { source(s_src); filter(f_daemon); destination(d_daemon); };
log { source(s_src); filter(f_kern); destination(d_kern); };
log { source(s_src); filter(f_lpr); destination(d_lpr); };
log { source(s_src); filter(f_syslog3); destination(d_syslog); };
log { source(s_src); filter(f_user); destination(d_user); };
log { source(s_src); filter(f_uucp); destination(d_uucp); };

log { source(s_src); filter(f_mail); destination(d_mail); };
#log { source(s_src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
#log { source(s_src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
#log { source(s_src); filter(f_mail); filter(f_err); destination(d_mailerr); };

log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };
#log { source(s_src); filter(f_cnews); destination(d_console_all); };
#log { source(s_src); filter(f_cother); destination(d_console_all); };

#log { source(s_src); filter(f_ppp); destination(d_ppp); };

log { source(s_src); filter(f_debug); destination(d_debug); };
log { source(s_src); filter(f_error); destination(d_error); };
log { source(s_src); filter(f_messages); destination(d_messages); };

log { source(s_src); filter(f_console); destination(d_console_all);
				    destination(d_xconsole); };
log { source(s_src); filter(f_crit); destination(d_console); };

# All messages send to a remote site
#
#log { source(s_src); destination(d_net); };
########################
#WSO2 Stratos, configurations for local css node
#######################
destination d_stratos_tcp_node0 { tcp("node0.log.stratoslive.wso2.com" port(5140)); };
destination d_stratos_tcp_node1 { tcp("node1.log.stratoslive.wso2.com" port(5140)); };
source carbon_access_log_collector0 { tcp(ip(node0.log.stratoslive.wso2.com) port(5141) max-connections(500)); };
source carbon_access_log_collector1 { tcp(ip(node1.log.stratoslive.wso2.com) port(5141) max-connections(500)); };

#Log source
source src_file_0 {file(/mnt/209.126.198.119/wso2css-1.0.1/repository/logs/wso2carbon.log follow_freq(2) );};
log{source(src_file_0);destination(d_stratos_tcp_node0);};
log{source(src_file_0);destination(d_stratos_tcp_node1);};



###################################
#WSO2 Stratos Log Cluster node0
###################################

#listen via TCP
source ts_net { tcp(ip(node0.log.stratoslive.wso2.com) port(5140) max-connections(500)); };

#Parse Log line
parser p_carbon {
       csv-parser(columns("TD","PROD","D2","CARBON.REMOTE.IP", "CARBON.TIME.STAMP", "CARBON.TENANT" ,"CARBON.REMAINDER")
               flags(escape-double-char,strip-whitespace,greedy)
               delimiters(" ")
               quote-pairs('""[]')
       );
};

#Filter Carbon log pattern
filter f_tenant { match("TID"); };

#Store logs with tenant filtering
destination d_stratos { file("/mnt/slive_logs/stratos/${TD}/${TD}.log" owner(root) group(root) perm(0666) dir_perm(0755) create_dirs(yes) ); };
destination d_stratos_product { file("/mnt/slive_logs/stratos/${TD}/${PROD}/${PROD}.log" owner(root) group(root) perm(0666) dir_perm(0755) create_dirs(yes) ); };
destination d_stratos_catch_all { file("/mnt/slive_logs/stratos/wso2carbon.log" owner(root) group(root) perm(0666)); };

#Store access logs
destination d_stratos_access_log_catch_all { file("/mnt/slive_logs/stratos/access_logs/http_access_${YEAR}_${MONTH}_${DAY}.log" owner(root) group(root) perm(0666)); };


#logging process
#Tenant Log for all product and services
log { source(ts_net); parser(p_carbon); filter(f_tenant); destination(d_stratos); };
#Tenant log for products
log { source(ts_net); parser(p_carbon); filter(f_tenant); destination(d_stratos_product); };
#Super Tenant Logs
log { source(ts_net); destination(d_stratos_catch_all); };

#Access logs
log { source(carbon_access_log_collector0); destination(d_stratos_access_log_catch_all); };

